from flask import Flask, render_template, request

import torch

from PIL import Image
from transformers import BlipProcessor, BlipForConditionalGeneration

import openai

openai.api_key = '' # Add your key here

app = Flask(__name__)

# Create image preprocessor object
processor = BlipProcessor.from_pretrained(
    "Salesforce/blip-image-captioning-large")

# Identify available device (use GPU if available)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# load image description model
model = BlipForConditionalGeneration.from_pretrained(
    "Salesforce/blip-image-captioning-large").to(device)


def predict_label(img_path, num_captions=1):

    # Read image
    raw_image = Image.open(img_path).convert('RGB')

    # Preprocess
    inputs = processor(raw_image, return_tensors="pt").to("cuda")

    # Image Description
    out = model.generate(**inputs)

    # Description post-processing
    description = processor.decode(out[0], skip_special_tokens=True)

    # item = {'message': {'content': f'Temp response: {description}'}}
    # caption_object = {'choices': [item]*num_captions}

    caption_object = openai.ChatCompletion.create(
    	model="gpt-3.5-turbo",
    	messages=[ 
    		{"role": "system", "content": "You are a catchy, exciting, innovative, captivating, creative and engaging social media caption generator."},
    		{"role": "user", "content": f"Generate a caption if the image is described as: {description}"}
    	],
    	temperature= 1.2,
    	n=num_captions
    )

    # Extracting the caption generated by GPT-3.5
    captions = [choice['message']['content']
                for choice in caption_object['choices']]

    return captions

# routes


@app.route("/", methods=['GET', 'POST'])
def kuch_bhi():
    return render_template("home.html")


@app.route("/about")
def about_page():
    return "About You..!!!"


@app.route("/submit", methods=['GET', 'POST'])
def get_hours():
    if request.method == 'POST':
       
        img = request.files['my_image']
        num_captions = int(request.form['captions'])

        img_path = "static/" + img.filename
        img.save(img_path)

        p = predict_label(img_path, num_captions)

    return render_template("home.html", prediction=p, img_path=img_path)


if __name__ == '__main__':
    #app.debug = True
    app.run(debug=True)
